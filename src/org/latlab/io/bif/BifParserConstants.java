/* Generated By:JavaCC: Do not edit this line. BifParserConstants.java */
package org.latlab.io.bif;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BifParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NEWLINE = 1;
  /** RegularExpression Id. */
  int DIGIT = 2;
  /** RegularExpression Id. */
  int ALPHA = 3;
  /** RegularExpression Id. */
  int UNICODE_CHAR = 4;
  /** RegularExpression Id. */
  int ALPHA_DASH = 5;
  /** RegularExpression Id. */
  int ALPHA_DASH_SPACE = 6;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 9;
  /** RegularExpression Id. */
  int NETWORK = 10;
  /** RegularExpression Id. */
  int VARIABLE = 11;
  /** RegularExpression Id. */
  int PROBABILITY = 12;
  /** RegularExpression Id. */
  int TYPE = 13;
  /** RegularExpression Id. */
  int DISCRETE = 14;
  /** RegularExpression Id. */
  int CONTINUOUS = 15;
  /** RegularExpression Id. */
  int DEFAULT_VALUE = 16;
  /** RegularExpression Id. */
  int TABLE = 17;
  /** RegularExpression Id. */
  int PROPERTY = 18;
  /** RegularExpression Id. */
  int EXPONENT = 19;
  /** RegularExpression Id. */
  int NON_NEGATIVE_INTEGER = 20;
  /** RegularExpression Id. */
  int NON_NEGATIVE_FLOAT = 21;
  /** RegularExpression Id. */
  int NEGATIVE_FLOAT = 22;
  /** RegularExpression Id. */
  int IDENTIFIER = 23;
  /** RegularExpression Id. */
  int PROPERTY_DOUBLE_QUOTE = 24;
  /** RegularExpression Id. */
  int POSITION = 25;
  /** RegularExpression Id. */
  int ROTATION = 26;
  /** RegularExpression Id. */
  int FRAME = 27;
  /** RegularExpression Id. */
  int LABEL = 28;
  /** RegularExpression Id. */
  int FORECOLOR = 29;
  /** RegularExpression Id. */
  int BACKCOLOR = 30;
  /** RegularExpression Id. */
  int LINECOLOR = 31;
  /** RegularExpression Id. */
  int FONT = 32;
  /** RegularExpression Id. */
  int FONTSIZE = 33;
  /** RegularExpression Id. */
  int CONNECTION_CONSTRAINT = 34;
  /** RegularExpression Id. */
  int NONE = 35;
  /** RegularExpression Id. */
  int OVAL = 36;
  /** RegularExpression Id. */
  int RECTANGLE = 37;
  /** RegularExpression Id. */
  int PROPERTY_EQUAL = 38;
  /** RegularExpression Id. */
  int PROPERTY_LPARENTHESE = 39;
  /** RegularExpression Id. */
  int PROPERTY_RPARENTHESE = 40;
  /** RegularExpression Id. */
  int PROPERTY_COMMA = 41;
  /** RegularExpression Id. */
  int PROPERTY_END_CHAR = 42;
  /** RegularExpression Id. */
  int SINGLE_QUOTED_STRING = 43;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int PROPERTY_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<NEWLINE>",
    "<DIGIT>",
    "<ALPHA>",
    "<UNICODE_CHAR>",
    "<ALPHA_DASH>",
    "<ALPHA_DASH_SPACE>",
    "\" \"",
    "\"\\t\"",
    "<SINGLE_LINE_COMMENT>",
    "\"network\"",
    "\"variable\"",
    "\"probability\"",
    "\"type\"",
    "\"discrete\"",
    "\"continuous\"",
    "\"default\"",
    "\"table\"",
    "\"property\"",
    "<EXPONENT>",
    "<NON_NEGATIVE_INTEGER>",
    "<NON_NEGATIVE_FLOAT>",
    "<NEGATIVE_FLOAT>",
    "<IDENTIFIER>",
    "\"\\\"\"",
    "\"position\"",
    "\"rotation\"",
    "\"frame\"",
    "\"label\"",
    "\"foreColor\"",
    "\"backColor\"",
    "\"lineColor\"",
    "\"font\"",
    "\"fontSize\"",
    "\"connectionConstraint\"",
    "\"none\"",
    "\"oval\"",
    "\"rectangle\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\";\"",
    "<SINGLE_QUOTED_STRING>",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"|\"",
    "\";\"",
    "\"[\"",
    "\"]\"",
    "\"NaN\"",
  };

}
