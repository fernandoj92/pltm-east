/**
 * 
 */
package org.latlab.learner.geast.operators;

import java.util.LinkedList;

import org.latlab.learner.geast.IModelWithScore;
import org.latlab.learner.geast.context.ISearchOperatorContext;
import org.latlab.util.Evaluator;

/**
 * An operator that generates candidates from a given base model.
 * 
 * <p>
 * It uses multiple threads in the {@code search} method, so that different
 * candidates are evaluated in parallel with a number of threads.
 * 
 * @author leonard
 * 
 */
public abstract class SearchOperator {

	protected final ISearchOperatorContext context;

	/**
	 * Constructs a search operator with the search context and choice of
	 * whether to perform the search with multiple threads.
	 * 
	 * @param context
	 *            gives some information about the current search
	 */
	protected SearchOperator(ISearchOperatorContext context) {
		this.context = context;
	}

	/**
	 * Searches for the best candidates generated by this operator, based on the
	 * criterion of the given {@code evaluator}. Returns the {@code base}
	 * candidate if it can't find a better one. So it guarantees to return the
	 * best model (either the base model or a found better model).
	 * 
	 * @param base
	 *            base model to search from
	 * @param evaluator
	 *            to evaluate the search candidates
	 * @return the best candidate it can find
	 */
	public abstract SearchCandidate search(IModelWithScore base,
			Evaluator<SearchCandidate> evaluator);

	/**
	 * Generates the candidates from the {@code base} model. The {@code base}
	 * model should not be modified.
	 * 
	 * <p>
	 * It is possible that no candidate is generated.
	 * 
	 * @param base
	 *            from which the candidates are generated
	 * @return the candidates generated
	 */
	protected abstract LinkedList<SearchCandidate> generateCandidates(
			IModelWithScore base);

	/**
	 * Logs the candidate found by this search operator.
	 * 
	 * @param candidate
	 *            candidate found
	 */
	protected void log(SearchCandidate candidate) {
		context.log().writeElement(candidate.element(), candidate, false);
	}

	/**
	 * Name of this search operator.
	 * 
	 * @return name of this search operator
	 */
	public String name() {
		return getClass().getSimpleName();
	}

	/**
	 * Updates the state of this search operator given the latest selected
	 * candidate.
	 * 
	 * @param latest
	 *            the latest selected candidate
	 */
	public void update(SearchCandidate latest) {

	}
}
